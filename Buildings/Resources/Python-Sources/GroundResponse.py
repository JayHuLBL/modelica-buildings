''' Python module that is used for the example
    Buildings.Fluid.Geothermal.Borefields.BaseClasses.GroundResponse.Validation.ResponsePython
'''
import os
import shutil

def doStep(dblInp, state):
    modelicaWorkingPath = os.getcwd()
    py_dir = os.path.join(modelicaWorkingPath,'Resources/Python-Sources')
    tou_tmp = os.path.join(py_dir, 'toughTemp')
    
    # heat flux between borehole wall and ground
    Q = dblInp[:10]
    # start borehole wall temperature
    T_start = [dblInp[i] for i in range(10,20)]
    tim = dblInp[-1]

    if state == None:
        copy_files(os.path.join(py_dir, 'ToughFiles'), tou_tmp)
        # Initialize the state
        state = {'tLast': tim, 'Q': Q, 'T': T_start}
        T = T_start
    else:
        tLast = state['tLast']
        # Use the python object
        dt = tim - tLast
        # JModelica invokes the model twice during an event, in which case
        # dt is zero, or close to zero.
        # We don't evaluate the equations as this can cause chattering and in some
        # cases JModelica does not converge during the event iteration.
        # This guard is fine because the component is sampled at discrete time steps.
        if dt > 1E-2:
            # create a temporary working directory
            wor_dir = create_working_directory()
            # copy files generated by previous call to working directory
            copy_files(tou_tmp, wor_dir)

            # change current directory to working directory
            os.chdir(wor_dir)

            # check if there is 'GENER'. If the file does not exist, it means this is 
            # the first call of TOUGH simulation. There is no 'SAVE' yet so cannot call
            # `writeincon` to generate input files for TOUGH simulation.
            if not os.path.exists('GENER'):
                # create initial 'GENER' file
                initialize_gener(state['Q'], 'GENER')
                # update existing 'INFILE'
                update_infile(tLast, tim, 'INFILE', 'newINFILE')
            # It's not the first call of TOUGH simulation. So there is 'SAVE' file from
            # previous TOUGH call and we can use `writeincon` to generate TOUGH input 
            # files.
            else:
                # delete old TOUGH input files
                if os.path.exists('GENER'):
                    os.remove('GENER')
                if os.path.exists('INCON'):
                    os.remove('INCON')
                if os.path.exists('newINFILE'):
                    os.remove('newINFILE')

                # update `writeincon.inp` file. The states `T` and `Q` are the measured
                # values from Modeica in previous call.
                update_writeincon('writeincon.inp', tLast, tim, state['T'], state['Q'])

                # generate TOUGH input files
                os.system("./writeincon < writeincon.inp")
                if os.path.exists('INFILE'):
                    os.remove('INFILE')
                os.rename('newINFILE', 'INFILE')
            
            # conduct one step TOUGH simulation
            os.system("/opt/esd-tough/tough3-serial/tough3-install/bin/tough3-eos1")

            # extract borehole wall temperature
            os.system("./readsave < readsave.inp > out.txt")
            T = borehole_temperature('out.txt')

            # update state
            state = {'tLast': tim, 'Q': Q, 'T': T}

            # empty the 'toughTemp' folder
            touTmpFil = os.listdir(tou_tmp)
            for f in touTmpFil:
                os.remove(os.path.join(tou_tmp, f))
            
            # save files from temp directory to temp tough folder
            copy_files(wor_dir, tou_tmp)

            # change back to original working directory
            os.chdir(modelicaWorkingPath)

            # delete temporary working folder
            shutil.rmtree(wor_dir)

    return [T, state]

''' Create working directory
'''
def create_working_directory():
    import tempfile
    import getpass
    worDir = tempfile.mkdtemp(prefix='tmp-tough-modelica-' + getpass.getuser())
    return worDir

''' Copy files from source directory to destination directory
'''
def copy_files(src, dest):
    srcFiles = os.listdir(src)
    for fil in srcFiles:
        fileName = os.path.join(src, fil)
        if os.path.isfile(fileName):
            shutil.copy(fileName, dest)

''' Create initial `GENER` file for the 1st call of TOUGH
'''
def initialize_gener(Q, fileName):
    with open(fileName, 'w') as f:
        f.write("GENER" + os.linesep)
        f.write("  7 1sou 1                         HEAT  %10.3e" % Q[0] + os.linesep)
        f.write("  8 1sou 2                         HEAT  %10.3e" % Q[1] + os.linesep)
        f.write("  9 1sou 3                         HEAT  %10.3e" % Q[2] + os.linesep)
        f.write(" 10 1sou 4                         HEAT  %10.3e" % Q[3] + os.linesep)
        f.write(" 11 1sou 5                         HEAT  %10.3e" % Q[4] + os.linesep)
        f.write(" 12 1sou 6                         HEAT  %10.3e" % Q[5] + os.linesep)
        f.write(" 13 1sou 7                         HEAT  %10.3e" % Q[6] + os.linesep)
        f.write(" 14 1sou 8                         HEAT  %10.3e" % Q[7] + os.linesep)
        f.write(" 15 1sou 9                         HEAT  %10.3e" % Q[8] + os.linesep)
        f.write(" 16 1sou 10                        HEAT  %10.3e" % Q[9] + os.linesep)
        f.write("+++" + os.linesep)
        f.write("         1         2         3         4         5         6         7         8" + os.linesep)
        f.write("         9        10")

''' Update the `INFILE` file for the 1st call of TOUGH
'''
def update_infile(preTim, curTim, infile, outfile):
    fin = open(infile)
    fout = open(outfile, 'wt')
    count = 0
    for line in fin:
        count += 1
        if count == 18:
            endStr=line[20:]
            staStr='%10.4E%10.4E' % (preTim, curTim)
            fout.write(staStr + endStr)
        else:
            fout.write(line)
    fin.close()
    fout.close()
    os.remove(infile)
    os.rename(outfile, infile)

''' Update the `writeincon.inp` file with the current time and state values that are
    seem as initial values of current TOUGH simulation
'''
def update_writeincon(infile, preTim, curTim, boreholeTem, heatFlux):
    fin = open(infile)
    fout = open('temp', 'wt')
    count = 0
    for line in fin:
        count += 1
        # assign initial time
        if count == 6:
            tempStr = '% 10.3f' % preTim
            fout.write(tempStr.strip() + os.linesep)
        # assign final time
        elif count ==  8:
            tempStr = '% 10.3f' % curTim
            fout.write(tempStr.strip() + os.linesep)
        # assign borehole wall temperature to each segment
        elif (count >= 10 and count <= 19):
            tempStr = '% 10.3f' % (boreholeTem[count-10] - 273.15)
            fout.write(tempStr.strip() + os.linesep)
        # assign heat flux to each segment
        elif (count >= 21 and count <= 30):
            tempStr = '% 10.3f' % heatFlux[count-21]
            fout.write(tempStr.strip() + os.linesep)
        else:
            fout.write(line)
    fin.close()
    fout.close()
    os.remove(infile)
    os.rename('temp', infile)

''' Extract the borehole temperature from TOUGH simulation results
'''
def borehole_temperature(outFile):
    data = []
    fin = open(outFile)
    count = 0
    for line in fin:
        count += 1
        if count <= 10:
            data.append(float(line.strip())+273.15)
    return data
